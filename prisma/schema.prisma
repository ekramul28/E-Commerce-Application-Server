generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        UserRole
  orders      Order[]
  reviews     Review[]
  cart        Cart?
  vendor      Vendor?
  admin       Admin?
  followedShops Shop[] @relation("UserFollowedShops")
  // recentViews Product[] @relation("UserRecentViews")
  recentView  RecentView[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

model Vendor {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  shop        Shop?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  logo        String
  description String?
  vendorId    String   @unique
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  products    Product[]
  followers   User[]   @relation("UserFollowedShops")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  inventory   Int
  images      String[] // Array of image URLs
  discount    Float?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
  reviews     Review[]
  orders      OrderItem[]
  cartItem    CartItem[]
  recentView  RecentView[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  totalAmount  Float
  paymentId    String?
  status       OrderStatus
  items        OrderItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  quantity  Int
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecentView {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  viewedAt  DateTime @default(now())
}

