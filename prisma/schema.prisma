generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User{
  id          String   @id @default(uuid())
  email       String @unique
  password    String
  profilePhoto String?
  vendor      Vendor?
  admin       Admin?
  customer    Customer?
  status      UserStatus @default(ACTIVE)
  needPasswordChange Boolean    @default(true)
  role        UserRole
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("users")
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  profilePhoto  String?
  contactNumber String?
  orders      Order[]
  reviews     Review[]
  cart        Cart[]
  user        User     @relation(fields: [email], references: [email])
  followedShops Shop[] @relation("ShopFollowers")
  recentView  RecentView[]
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("customers")
}



enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}


model Admin {
  id        String   @id @default(uuid())
  name  String
  profilePhoto  String?
  contactNumber String?
  email    String @unique
  user      User     @relation(fields: [email], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted   Boolean @default(false)

  @@map("admins")
}

model Vendor {
  id          String   @id @default(uuid())
  name  String
  email        String @unique
  profilePhoto  String?
  contactNumber String?
  user        User     @relation(fields: [email], references: [email])
  shop        Shop?
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vendors")
}


model Shop {
  id          String   @id @default(uuid())
  name        String
  logo        String
  description String?
  vendorId    String   @unique
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  products    Product[]
  followers   Customer[]   @relation("ShopFollowers")
  order       Order[]
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shops")
}


model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  image       String?
  offer       String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       String
  images      String[] // Array of image URLs
  discount    String?
  offer       String
  offerDiscount String?
  Quantity     String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
  reviews     Review[]
  orders      Order[]
  cartItem    CartItem[]
  recentView  RecentView[]
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}


model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  customer      Customer     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Order {
  id           String     @id @default(uuid())
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
  customerId       String
  customer         Customer       @relation(fields: [customerId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  paymentId    String?
  status       OrderStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("orders")
}



enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}


model Cart {
  id        String   @id @default(uuid())
  customerId    String   @unique
  customer      Customer     @relation(fields: [customerId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  quantity  Int

  @@map("cartItems")
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecentView {
  id        String   @id @default(uuid())
  userId    String
  customer      Customer     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  viewedAt  DateTime @default(now())

  
}

